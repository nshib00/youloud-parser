from pathlib import Path
from rich.console import Console
import inquirer
from pyfiglet import figlet_format
from loguru import logger

from youloud_parser.classes import Album
from youloud_parser.exceptions import NoAlbumsError


console = Console()


def print_ascii_art() -> None:
    art = figlet_format('Youloud * Parser')
    console.print(f'[#4be38f]{"-" * 75}')
    console.print(f'[#4be38f]{art}')
    console.print(f'[#4be38f]{"-" * 75}')


def print_info_message() -> None:
    console.print(f'[i #777777]üõà  –ß—Ç–æ–±—ã –≤—ã–π—Ç–∏ –∏–∑ –ø—Ä–æ–≥—Ä–∞–º–º—ã, –Ω–∞–∂–º–∏—Ç–µ Enter.\n')


def get_album_query() -> str:
    return console.input('[#4be38f]–í–≤–µ–¥–∏—Ç–µ –∑–∞–ø—Ä–æ—Å[/] [i #777777](–∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å –∏/–∏–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –∞–ª—å–±–æ–º–∞): [/]')


def print_no_albums_message() -> None:
    console.print(
        '[#f5bc42]–ê–ª—å–±–æ–º–æ–≤ –ø–æ –∑–∞–ø—Ä–æ—Å—É –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–µ–º–Ω–æ–≥–æ –∏–∑–º–µ–Ω–∏—Ç—å –ø—Ä–µ–¥—ã–¥—É—â–∏–π –∑–∞–ø—Ä–æ—Å –∏–ª–∏ –≤–≤–µ—Å—Ç–∏ –Ω–æ–≤—ã–π.[/]'
    )


def print_program_stop_message() -> None:
    console.print('[#a0dddd]–†–∞–±–æ—Ç–∞ –ø—Ä–æ–≥—Ä–∞–º–º—ã –∑–∞–≤–µ—Ä—à–µ–Ω–∞.')


def print_error_message(error: Exception) -> None:
    console.print(f'[#ff4a44]–í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞: {error}.[/]')
 

async def choose_albums_to_download(albums: list[Album]) -> list[Album]:
    if not albums:
        raise NoAlbumsError
    else:
        albums_checkbox = [
                inquirer.Checkbox(
                'albums',
                message='–í—ã–±–µ—Ä–∏—Ç–µ –∞–ª—å–±–æ–º(—ã), –∫–æ—Ç–æ—Ä—ã–µ —Ö–æ—Ç–∏—Ç–µ —Å–∫–∞—á–∞—Ç—å',
                choices=albums,
                carousel=True,
            )
        ]
        try:
            needed_albums: dict = inquirer.prompt(albums_checkbox)
            return needed_albums.get('albums')
        except (AttributeError, IndexError):
            print_no_albums_message()
            logger.info('–í—ã–±–æ—Ä –∞–ª—å–±–æ–º–æ–≤ –ø—Ä–µ—Ä–≤–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.')
            return []
    

def print_album_code_message(response_json: dict) -> None:
    if response_json['status'] == False:
        if response_json['code'] == -2: 
            timeleft = response_json['timeleft']
            if '1 —á–∞—Å–æ–≤' in timeleft:
                timeleft = timeleft.replace('—á–∞—Å–æ–≤', '—á–∞—Å')
            limit_info_text = '–î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –∞–ª—å–±–æ–º–æ–≤. –î–æ –æ–±–Ω—É–ª–µ–Ω–∏—è –ª–∏–º–∏—Ç–∞ –æ—Å—Ç–∞–ª–æ—Å—å:'
            console.print(f'[#ff7f44]{limit_info_text}[/] [b green]{timeleft}.[/]')
            logger.info(f'{limit_info_text} {timeleft}.')
        else:
            console.print(f'[#ff4a44]–í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏. –ö–æ–¥ –æ—à–∏–±–∫–∏: {response_json["code"]}.[/]')
            logger.error(f'–û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Å Youloud. –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞: {response_json}.')


def print_message_after_download(album: Album) -> None:
    console.print(f'[#4be38f]–ê–ª—å–±–æ–º [i]"{album.artist} - {album.title}"[/] —Å–∫–∞—á–∞–Ω —É—Å–ø–µ—à–Ω–æ.[/]')
    logger.success(f'–ê–ª—å–±–æ–º "{album.artist} - {album.title}" —Å–∫–∞—á–∞–Ω —É—Å–ø–µ—à–Ω–æ.')


def print_save_album_message(album_path: Path) -> None:
    console.print(f'[white]–ü—É—Ç—å –¥–æ –ø–∞–ø–∫–∏ —Å –∞–ª—å–±–æ–º–æ–º:[/] [i #a0c2c2]{album_path}.[/]')
    logger.info(f'–ü—É—Ç—å –¥–æ –ø–∞–ø–∫–∏ —Å –∞–ª—å–±–æ–º–æ–º: {album_path}.')


def print_albums_not_found_message() -> None:
    console.print('[#f5bc42]–ê–ª—å–±–æ–º–æ–≤ –ø–æ –∑–∞–ø—Ä–æ—Å—É –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.[/]')


def make_album_data_status_text(album: Album) -> str:
    return f'[#a0dddd]–ü–æ–ª—É—á–∞—é –¥–∞–Ω–Ω—ã–µ –æ–± –∞–ª—å–±–æ–º–µ [i]"{album.artist} - {album.title}"...[/][/]'


def make_download_status_text(album: Album) -> str:
    logger.info('–ù–∞—á–∞–ª–æ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –∞–ª—å–±–æ–º–∞ "{album.artist} - {album.title}".')
    return f'[#a0dddd]–°–∫–∞—á–∏–≤–∞—é –∞–ª—å–±–æ–º [i]"{album.artist} - {album.title}"...[/][/]'




